


console.log("***** SELECTORS *****")

document.title = "FS16 ğŸš§"

// document objesÄ±yle baslangÄ±z sayfa Ä±smÄ±mÄ± deÄŸiÅŸtirdim




//*===========================================
//*            getElementById()
//*===========================================
// Bir HTML elementini Ä°d gÃ¶re secmenizi saÄŸlar

// getElementById() metodu, belirtilen bir ID'ye sahip olan bir HTML elementini seÃ§mek iÃ§in kullanÄ±lan bir DOM yÃ¶ntemidir. Bu metodun kullanÄ±mÄ± oldukÃ§a yaygÄ±ndÄ±r ve genellikle belirli bir elemente eriÅŸmek veya onunla etkileÅŸimde bulunmak iÃ§in kullanÄ±lÄ±r.

console.log(document.getElementById("add-new-item"))

//** getElementById*******/ 

//id'si add-new-item olan elementi secer
const headerText = document.getElementById("add-new-item")
console.log(headerText)

// secilen elementin style propertysini manipule ettik
//? her sey key-value ÅŸeklinde yazÄ±lÄ±r.
// yukarda add-new-item i headerText e atadÄ±k
headerText.style.color = "blue"
headerText.style.backgroundColor = "yellow"
headerText.style.border = "2px solid red"
//! NOTE: property 'ler de kebap-case deÄŸil camelCase notasyonu kullanÄ±lÄ±r.

//? NOTE
// headerText.style = "font-family: tahoma; font-size: 30px" //? CSS vari eriÅŸim

//** */ id'si btn olan elementi secer
const addBtn = document.getElementById("btn")
console.log(addBtn)

//** */ HTML elementlerininin Ä°Ã§erikleri okuma ve deÄŸiÅŸtirme
//?----------------------------------------
const htmlLi = document.getElementById("html-li")
console.log(htmlLi);
// seÃ§ip seÃ§mediÄŸimizi anlmak iÃ§in console yazdÄ±rmakta fayda var
htmlLi.style.color = "red"

//bir text elementinin iÃ§eriÄŸi aÅŸaÄŸÄ±daki attribute'ler ile degisitirlebilir.

//***** textContent, innerText, innerHTML******

console.log(htmlLi.textContent)
htmlLi.textContent = "HTML5"
htmlLi.textContent = "<h2>HTML5</h2>"

document.getElementById("js-li").innerText = "JS"
document.getElementById("js-li").innerText = "<h2>JS</h2>"

document.getElementById("react-li").innerHTML = "React JS"
document.getElementById("react-li").innerHTML =
  "<h2 style='color: blue'>REACT JS</h2>"

// innerHTML iÃ§inde HTML kodu varsa Ã§alÄ±ÅŸtÄ±rÄ±r lakin textContent, innerText Ã§alÄ±ÅŸtÄ±rmaz

//?! input'larÄ±n degerinin (Value ile)okunmasÄ±/yazÄ±lmasÄ±

const myInput = document.getElementById("input")
console.log(myInput.value)
//input olduÄŸu iÃ§in direk okunamaz value sÄ± vardÄ±r value uzerÄ±nden okunur.Ä°nputun Ä±cÄ±nde baÅŸlangÄ±c degerÄ± olursa gorursun

addBtn.value = "SUBMIT"




//*===========================================
//*         getElementsByTagName()
//*===========================================

// Belirli bir etikete sahip tÃ¼m elementleri seÃ§mek ve onlarla iÅŸlem yapmak iÃ§in kullanÄ±lÄ±r. 
//Ã–rneÄŸin, tÃ¼m <li> elementlerini seÃ§ip stil eklemek veya iÃ§eriklerini deÄŸiÅŸtirmek gibi.

const allLi = document.getElementsByTagName("li")

console.log(allLi) //? HTML Collection
// Array benzÄ±yor ama degÄ±l cunku bu yapÄ± Js Ä±cÄ±nde bÄ±r yapÄ± degÄ±l DOM un kendÄ± olusturdugu yapÄ±sÄ±

// getElementsByTagName() yÃ¶ntemi, belirli bir HTML belgesinde belirtilen etikete (tag) sahip tÃ¼m elementleri seÃ§mek iÃ§in kullanÄ±lan bir DOM yÃ¶ntemidir. Bu yÃ¶ntem, bir etikete sahip olan tÃ¼m elementleri bir HTMLCollection nesnesi olarak dÃ¶ndÃ¼rÃ¼r

// getElementsByTagName() yÃ¶ntemi, belirtilen etikete sahip tÃ¼m elementleri dÃ¶ndÃ¼rÃ¼r. Ancak, dÃ¶ndÃ¼rÃ¼len HTMLCollection canlÄ± bir koleksiyondur, yani belirli bir anda elde edilen elementlerin bir listesidir. Yani, belirli bir etikete sahip yeni elementler eklenirse veya mevcut elementler kaldÄ±rÄ±lÄ±rsa, HTMLCollection otomatik olarak gÃ¼ncellenir.
// DÃ¶ndÃ¼rÃ¼len HTMLCollection, bir diziyi andÄ±rÄ±r, ancak tam olarak bir dizi deÄŸildir. Bunun anlamÄ±, bazÄ± dizi Ã¶zelliklerinin (Ã¶rneÄŸin, forEach(), map(), filter() gibi) doÄŸrudan uygulanamayacaÄŸÄ±dÄ±r.

//?HTML collection'daki her bir elemente indisleme ile eriÅŸilebilir.
console.log(allLi[1].textContent)
allLi[2].textContent = "JS-React"

//? Tplu bir ÅŸekilde eriÅŸim iÃ§in for yapÄ±larÄ± kullanÄ±labilir.
for (let li of allLi) {
  console.log(li.textContent)
}

//! array-like grubunda direk array metotlarÄ± kulanÄ±lamamz.
// allLi.forEach((li) => console.log(li))

//? Ã‡Ã¶zÃ¼m olarak array-like grubu array'e Ã§evirilebilir.

//? 1-spread
const arrAllLi = [...allLi]
console.log(arrAllLi)
arrAllLi.forEach((li) => (li.style.color = "fuchsia"))

//? 2-array.from()
console.log(Array.from(allLi))
Array.from(allLi).map((li) => (li.style.backgroundColor = "green"))





//*===========================================
//*          GETELEMENTSBYCLASSNAME()
//*===========================================

// getElementsByClassName() yÃ¶ntemi, belirli bir HTML belgesinde belirtilen bir sÄ±nÄ±fa sahip tÃ¼m elementleri seÃ§mek iÃ§in kullanÄ±lan bir DOM yÃ¶ntemidir. Bu yÃ¶ntem, bir sÄ±nÄ±fa sahip olan tÃ¼m elementleri bir HTMLCollection nesnesi olarak dÃ¶ndÃ¼rÃ¼r

const myList = document.getElementsByClassName("list")
console.log(myList) 
// list class'Ä±ndakÄ±lerÄ± getÄ±rÄ±r
//? HTML Collection

// KullanÄ±m SenaryolarÄ±:
// Belirli bir sÄ±nÄ±fa sahip tÃ¼m elementleri seÃ§mek ve onlarla iÅŸlem yapmak iÃ§in kullanÄ±lÄ±r. Ã–rneÄŸin, belirli bir sÄ±nÄ±fa sahip olan tÃ¼m elementlerin stillerini deÄŸiÅŸtirmek veya iÃ§eriklerini gÃ¼ncellemek gibi.

myList[0].innerText = "HTML Dersleri"

//? Ornek
document.getElementsByClassName("item-list")[0].style.color = "hotpink"






//* ========================================
//*              querySelector()
//* ========================================

// ! Query Selector ile id, tag, class seÃ§ilebilir
.
// querySelector() yÃ¶ntemi, CSS seÃ§icileri kullanarak belirli bir HTML belgesinde bir veya daha fazla elementi seÃ§mek iÃ§in kullanÄ±lan bir DOM yÃ¶ntemidir. Bu yÃ¶ntem, belirtilen CSS seÃ§icisine uyan ilk elementi dÃ¶ndÃ¼rÃ¼r. 
//! EÄŸer hiÃ§bir element bulunamazsa "null" dÃ¶ner. bu secici akÄ±sta gÃ¶rdÃ¼gÃ¼ ilk elementi secer.

//? Dikkat Edilmesi Gerekenler:

// querySelector() yÃ¶ntemi, CSS seÃ§icilerini kullanarak elementleri seÃ§mek iÃ§in kullanÄ±lÄ±r. Bu, id, sÄ±nÄ±f, etiket, nitelik seÃ§icileri gibi Ã§eÅŸitli CSS seÃ§ici tÃ¼rlerini kullanmanÄ±za olanak tanÄ±r.
// YÃ¶ntem, belirtilen CSS seÃ§icisine uyan ilk elementi seÃ§er. EÄŸer birden fazla element seÃ§mek istiyorsanÄ±z querySelectorAll() yÃ¶ntemini kullanabilirsiniz.
// SeÃ§ici, CSS seÃ§ici diline uygun olmalÄ±dÄ±r. Ã–rneÄŸin, "#myDiv" bir id seÃ§icisi, ".content" bir sÄ±nÄ±f seÃ§icisi, "p" bir etiket seÃ§icisi gibi.

//? KullanÄ±m SenaryolarÄ±:

// Belirli bir CSS seÃ§iciye uyan ilk elementi seÃ§mek iÃ§in kullanÄ±lÄ±r. Ã–rneÄŸin, belirli bir id'ye sahip bir elementi veya belirli bir sÄ±nÄ±fa sahip olan bir elementi seÃ§mek iÃ§in kullanÄ±labilir.
// Tek bir element seÃ§mek iÃ§in kullanÄ±lÄ±r ve querySelectorAll() metodu kullanÄ±lmadan daha spesifik bir seÃ§im yapÄ±lmasÄ±nÄ± saÄŸlar.

//? id almak iÃ§in (#)
console.log(document.querySelector("#btn"))

//? class almak iÃ§in (.)
console.log(document.querySelector(".item-list"))

//? tag almak iÃ§in
console.log(document.querySelector("li")) //? ilk gÃ¶rdugu elementi secer

//? CSS selectorleri querySelector ile kullanÄ±labilir.
const myH3 = document.querySelector("main section.item-list h3")
console.log(myH3)

const xyz = document.querySelector(".item-list ul li:nth-child(3)")
xyz.style.backgroundColor = "gray"




//* ========================================
//*              querySelectorAll()
//* ========================================

//querySelectorAll() yÃ¶ntemi, CSS seÃ§icileri kullanarak belirli bir HTML belgesinde tÃ¼m uygun elementleri seÃ§mek iÃ§in kullanÄ±lan bir DOM yÃ¶ntemidir. Bu yÃ¶ntem, belirtilen CSS seÃ§icisine uyan tÃ¼m elementleri NodeList nesnesi olarak dÃ¶ndÃ¼rÃ¼r

const liste = document.querySelectorAll(".item-list .list")
console.log(liste) //? NodeList

//* querySelectorAll bir nodelist dondurur. Nodelist dahili olarak forEach metodunu barindirir. Ama istenirse spread veya Array.from() ile yine Array'e donusum yapilabilir.
liste.forEach((li) => console.log(li.innerText))

//? Dikkat Edilmesi Gerekenler:

// querySelectorAll() yÃ¶ntemi, CSS seÃ§icilerini kullanarak elementleri seÃ§mek iÃ§in kullanÄ±lÄ±r. Bu, id, sÄ±nÄ±f, etiket, nitelik seÃ§icileri gibi Ã§eÅŸitli CSS seÃ§ici tÃ¼rlerini kullanmanÄ±za olanak tanÄ±r.
// YÃ¶ntem, belirtilen CSS seÃ§icisine uyan tÃ¼m elementleri seÃ§er ve NodeList olarak dÃ¶ndÃ¼rÃ¼r. Bu NodeList, bir dizi benzeri bir nesnedir, ancak tam olarak bir dizi deÄŸildir ve bazÄ± dizi Ã¶zelliklerini (Ã¶rneÄŸin, forEach(), map(), filter() gibi) doÄŸrudan uygulanamaz. Ancak, dizi gibi davranmak iÃ§in NodeList nesnesini bir diziye dÃ¶nÃ¼ÅŸtÃ¼rmek mÃ¼mkÃ¼ndÃ¼r.


//? KullanÄ±m SenaryolarÄ±:

// Belirli bir CSS seÃ§iciye uyan tÃ¼m elementleri seÃ§mek iÃ§in kullanÄ±lÄ±r. Ã–rneÄŸin, belirli bir sÄ±nÄ±fa sahip olan tÃ¼m elementleri veya belirli bir etikete sahip olan tÃ¼m elementleri seÃ§mek iÃ§in kullanÄ±labilir.
// Birden fazla elementi seÃ§mek ve her biriyle toplu iÅŸlemler yapmak iÃ§in kullanÄ±lÄ±r. Ã–rneÄŸin, tÃ¼m seÃ§ilen elementlerin stillerini deÄŸiÅŸtirmek veya iÃ§eriklerini gÃ¼ncellemek gibi.